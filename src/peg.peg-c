/* A recursive-descent parser generated by peg 0.1.18 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define YYRULECOUNT 31
#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->_begin= yy->_pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->_end= yy->_pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *_buf;
  int       _buflen;
  int       _pos;
  int       _limit;
  char     *_text;
  int       _textlen;
  int       _begin;
  int       _end;
  int       _textmax;
  yythunk  *_thunks;
  int       _thunkslen;
  int       _thunkpos;
  YYSTYPE   y_;
  YYSTYPE  *_val;
  YYSTYPE  *_vals;
  int       _valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->_buflen - yy->_pos < 512)
    {
      yy->_buflen *= 2;
      yy->_buf= (char *)YY_REALLOC(yy, yy->_buf, yy->_buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->_buf + yy->_pos), yyn, (yy->_buflen - yy->_pos));
#else
  YY_INPUT((yy->_buf + yy->_pos), yyn, (yy->_buflen - yy->_pos));
#endif
  if (!yyn) return 0;
  yy->_limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->_pos >= yy->_limit && !yyrefill(yy)) return 0;
  ++yy->_pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->_pos >= yy->_limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->_buf[yy->_pos] == c)
    {
      ++yy->_pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->_buf+yy->_pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->_buf+yy->_pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
int yysav= yy->_pos;
while (*s)
  {
    if (yy->_pos >= yy->_limit && !yyrefill(yy)) return 0;
    if (yy->_buf[yy->_pos] != *s)
      {
        yy->_pos= yysav;
        return 0;
      }
    ++s;
    ++yy->_pos;
  }
return 1;
}

YY_LOCAL(int) yymatchIString(yycontext *yy, const char *s)
{
  int yysav= yy->_pos;
  while (*s)
    {
      if (yy->_pos >= yy->_limit && !yyrefill(yy)) return 0;
      if (tolower(yy->_buf[yy->_pos]) != *s)
        {
          yy->_pos= yysav;
          return 0;
        }
      ++s;
      ++yy->_pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->_pos >= yy->_limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->_buf[yy->_pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->_pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->_buf+yy->_pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->_buf+yy->_pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->_thunkpos >= yy->_thunkslen)
    {
      yy->_thunkslen *= 2;
      yy->_thunks= (yythunk *)YY_REALLOC(yy, yy->_thunks, sizeof(yythunk) * yy->_thunkslen);
    }
  yy->_thunks[yy->_thunkpos].begin=  begin;
  yy->_thunks[yy->_thunkpos].end=    end;
  yy->_thunks[yy->_thunkpos].action= action;
  ++yy->_thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->_textlen < (yyleng + 1))
	{
	  yy->_textlen *= 2;
	  yy->_text= (char *)YY_REALLOC(yy, yy->_text, yy->_textlen);
	}
      memcpy(yy->_text, yy->_buf + begin, yyleng);
    }
  yy->_text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->_thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->_thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->_text));
      thunk->action(yy, yy->_text, yyleng);
    }
  yy->_thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->_limit -= yy->_pos))
    {
      memmove(yy->_buf, yy->_buf + yy->_pos, yy->_limit);
    }
  yy->_begin -= yy->_pos;
  yy->_end -= yy->_pos;
  yy->_pos= yy->_thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->_val += count;
  while (yy->_valslen <= yy->_val - yy->_vals)
    {
      long offset= yy->_val - yy->_vals;
      size_t oldlen = yy->_valslen;
      yy->_valslen *= 2;
      yy->_vals= (YYSTYPE *)YY_REALLOC(yy, yy->_vals, sizeof(YYSTYPE) * yy->_valslen);
      memset(&yy->_vals[oldlen], 0, sizeof(YYSTYPE) * oldlen);
      yy->_val= yy->_vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->_val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->_val[count]= yy->y_; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_EndOfLine(yycontext *yy); /* 31 */
YY_RULE(int) yy_Comment(yycontext *yy); /* 30 */
YY_RULE(int) yy_Space(yycontext *yy); /* 29 */
YY_RULE(int) yy_Range(yycontext *yy); /* 28 */
YY_RULE(int) yy_IdentCont(yycontext *yy); /* 27 */
YY_RULE(int) yy_IdentStart(yycontext *yy); /* 26 */
YY_RULE(int) yy_END(yycontext *yy); /* 25 */
YY_RULE(int) yy_BEGIN(yycontext *yy); /* 24 */
YY_RULE(int) yy_DOT(yycontext *yy); /* 23 */
YY_RULE(int) yy_Class(yycontext *yy); /* 22 */
YY_RULE(int) yy_Char(yycontext *yy); /* 21 */
YY_RULE(int) yy_CLOSE(yycontext *yy); /* 20 */
YY_RULE(int) yy_OPEN(yycontext *yy); /* 19 */
YY_RULE(int) yy_PLUS(yycontext *yy); /* 18 */
YY_RULE(int) yy_STAR(yycontext *yy); /* 17 */
YY_RULE(int) yy_QUESTION(yycontext *yy); /* 16 */
YY_RULE(int) yy_Primary(yycontext *yy); /* 15 */
YY_RULE(int) yy_NOT(yycontext *yy); /* 14 */
YY_RULE(int) yy_Suffix(yycontext *yy); /* 13 */
YY_RULE(int) yy_Action(yycontext *yy); /* 12 */
YY_RULE(int) yy_AND(yycontext *yy); /* 11 */
YY_RULE(int) yy_Prefix(yycontext *yy); /* 10 */
YY_RULE(int) yy_SLASH(yycontext *yy); /* 9 */
YY_RULE(int) yy_Sequence(yycontext *yy); /* 8 */
YY_RULE(int) yy_Expression(yycontext *yy); /* 7 */
YY_RULE(int) yy_LEFTARROW(yycontext *yy); /* 6 */
YY_RULE(int) yy_Identifier(yycontext *yy); /* 5 */
YY_RULE(int) yy_EndOfFile(yycontext *yy); /* 4 */
YY_RULE(int) yy_Definition(yycontext *yy); /* 3 */
YY_RULE(int) yy_Spacing(yycontext *yy); /* 2 */
YY_RULE(int) yy_Grammar(yycontext *yy); /* 1 */

YY_ACTION(void) yy_8_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_8_Primary\n"));
  {
#line 0
   push(makePredicate("YY_END")); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_7_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_7_Primary\n"));
  {
#line 0
   push(makePredicate("YY_BEGIN")); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_6_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_6_Primary\n"));
  {
#line 0
   push(makeAction(0, yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_5_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_5_Primary\n"));
  {
#line 0
   push(makeDot()); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_4_Primary\n"));
  {
#line 0
   push(makeClass(yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_3_Primary\n"));
  {
#line 0
   push(makeString(yytext, 1, 0)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_2_Primary\n"));
  {
#line 0
   push(makeString(yytext, 0, 0)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Primary(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_1_Primary\n"));
  {
#line 0
   push(makeName(findRule(yytext))); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_Suffix(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_3_Suffix\n"));
  {
#line 0
   push(makePlus (pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Suffix(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_2_Suffix\n"));
  {
#line 0
   push(makeStar (pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Suffix(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_1_Suffix\n"));
  {
#line 0
   push(makeQuery(pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_Prefix(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_3_Prefix\n"));
  {
#line 0
   push(makePeekNot(pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Prefix(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_2_Prefix\n"));
  {
#line 0
   push(makePeekFor(pop())); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Prefix(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_1_Prefix\n"));
  {
#line 0
   push(makePredicate(yytext)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Sequence(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_2_Sequence\n"));
  {
#line 0
   push(makePredicate("1")); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Sequence(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_1_Sequence\n"));
  {
#line 0
   Node *f= pop();  push(Sequence_append(pop(), f)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Expression(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_1_Expression\n"));
  {
#line 0
   Node *f= pop();  push(Alternate_append(pop(), f)); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Definition(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_2_Definition\n"));
  {
#line 0
   Node *e= pop();  Rule_setExpression(pop(), e); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Definition(yycontext *yy, char *yytext, int yyleng)
{
#define y_ yy->_
#define yypos yy->_pos
#define yythunkpos yy->_thunkpos
  yyprintf((stderr, "do yy_1_Definition\n"));
  {
#line 0
   if (push(beginRule(findRule(yytext)))->rule.expression) fprintf(stderr, "rule '%s' redefined\n", yytext); ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}

YY_RULE(int) yy_EndOfLine(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "EndOfLine"));
  {  int yypos2= yy->_pos, yythunkpos2= yy->_thunkpos;  if (!yymatchIString(yy, "\r\n")) goto l3;  goto l2;
  l3:;	  yy->_pos= yypos2; yy->_thunkpos= yythunkpos2;  if (!yymatchIString(yy, "\n")) goto l4;  goto l2;
  l4:;	  yy->_pos= yypos2; yy->_thunkpos= yythunkpos2;  if (!yymatchIString(yy, "\r")) goto l1;
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "EndOfLine", yy->_buf+yy->_pos));
  return 1;
  l1:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EndOfLine", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Comment(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yymatchIString(yy, "#")) goto l5;
  l6:;	
  {  int yypos7= yy->_pos, yythunkpos7= yy->_thunkpos;
  {  int yypos8= yy->_pos, yythunkpos8= yy->_thunkpos;  if (!yy_EndOfLine(yy)) goto l8;  goto l7;
  l8:;	  yy->_pos= yypos8; yy->_thunkpos= yythunkpos8;
  }  if (!yymatchDot(yy)) goto l7;  goto l6;
  l7:;	  yy->_pos= yypos7; yy->_thunkpos= yythunkpos7;
  }  if (!yy_EndOfLine(yy)) goto l5;
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", yy->_buf+yy->_pos));
  return 1;
  l5:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Space(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Space"));
  {  int yypos10= yy->_pos, yythunkpos10= yy->_thunkpos;  if (!yymatchIString(yy, " ")) goto l11;  goto l10;
  l11:;	  yy->_pos= yypos10; yy->_thunkpos= yythunkpos10;  if (!yymatchIString(yy, "\t")) goto l12;  goto l10;
  l12:;	  yy->_pos= yypos10; yy->_thunkpos= yythunkpos10;  if (!yy_EndOfLine(yy)) goto l9;
  }
  l10:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Space", yy->_buf+yy->_pos));
  return 1;
  l9:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Space", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Range(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Range"));
  {  int yypos14= yy->_pos, yythunkpos14= yy->_thunkpos;  if (!yy_Char(yy)) goto l15;  if (!yymatchIString(yy, "-")) goto l15;  if (!yy_Char(yy)) goto l15;  goto l14;
  l15:;	  yy->_pos= yypos14; yy->_thunkpos= yythunkpos14;  if (!yy_Char(yy)) goto l13;
  }
  l14:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Range", yy->_buf+yy->_pos));
  return 1;
  l13:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Range", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_IdentCont(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "IdentCont"));
  {  int yypos17= yy->_pos, yythunkpos17= yy->_thunkpos;  if (!yy_IdentStart(yy)) goto l18;  goto l17;
  l18:;	  yy->_pos= yypos17; yy->_thunkpos= yythunkpos17;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l16;
  }
  l17:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "IdentCont", yy->_buf+yy->_pos));
  return 1;
  l16:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IdentCont", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_IdentStart(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "IdentStart"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;
  yyprintf((stderr, "  ok   %s @ %s\n", "IdentStart", yy->_buf+yy->_pos));
  return 1;
  l19:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IdentStart", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_END(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "END"));  if (!yymatchIString(yy, ">")) goto l20;  if (!yy_Spacing(yy)) goto l20;
  yyprintf((stderr, "  ok   %s @ %s\n", "END", yy->_buf+yy->_pos));
  return 1;
  l20:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "END", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_BEGIN(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "BEGIN"));  if (!yymatchIString(yy, "<")) goto l21;  if (!yy_Spacing(yy)) goto l21;
  yyprintf((stderr, "  ok   %s @ %s\n", "BEGIN", yy->_buf+yy->_pos));
  return 1;
  l21:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "BEGIN", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_DOT(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "DOT"));  if (!yymatchIString(yy, ".")) goto l22;  if (!yy_Spacing(yy)) goto l22;
  yyprintf((stderr, "  ok   %s @ %s\n", "DOT", yy->_buf+yy->_pos));
  return 1;
  l22:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DOT", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Class(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Class"));  if (!yymatchIString(yy, "[")) goto l23;  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_BEGIN)) goto l23;
#undef yytext
#undef yyleng
  }
  l24:;	
  {  int yypos25= yy->_pos, yythunkpos25= yy->_thunkpos;
  {  int yypos26= yy->_pos, yythunkpos26= yy->_thunkpos;  if (!yymatchIString(yy, "]")) goto l26;  goto l25;
  l26:;	  yy->_pos= yypos26; yy->_thunkpos= yythunkpos26;
  }  if (!yy_Range(yy)) goto l25;  goto l24;
  l25:;	  yy->_pos= yypos25; yy->_thunkpos= yythunkpos25;
  }  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_END)) goto l23;
#undef yytext
#undef yyleng
  }  if (!yymatchIString(yy, "]")) goto l23;  if (!yy_Spacing(yy)) goto l23;
  yyprintf((stderr, "  ok   %s @ %s\n", "Class", yy->_buf+yy->_pos));
  return 1;
  l23:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Class", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Char(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Char"));
  {  int yypos28= yy->_pos, yythunkpos28= yy->_thunkpos;  if (!yymatchIString(yy, "\\")) goto l29;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\204\000\000\000\000\000\000\070\146\100\124\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l29;  goto l28;
  l29:;	  yy->_pos= yypos28; yy->_thunkpos= yythunkpos28;  if (!yymatchIString(yy, "\\")) goto l30;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l30;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l30;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l30;  goto l28;
  l30:;	  yy->_pos= yypos28; yy->_thunkpos= yythunkpos28;  if (!yymatchIString(yy, "\\")) goto l31;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l31;
  {  int yypos32= yy->_pos, yythunkpos32= yy->_thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l32;  goto l33;
  l32:;	  yy->_pos= yypos32; yy->_thunkpos= yythunkpos32;
  }
  l33:;	  goto l28;
  l31:;	  yy->_pos= yypos28; yy->_thunkpos= yythunkpos28;  if (!yymatchIString(yy, "\\")) goto l34;  if (!yymatchIString(yy, "-")) goto l34;  goto l28;
  l34:;	  yy->_pos= yypos28; yy->_thunkpos= yythunkpos28;
  {  int yypos35= yy->_pos, yythunkpos35= yy->_thunkpos;  if (!yymatchIString(yy, "\\")) goto l35;  goto l27;
  l35:;	  yy->_pos= yypos35; yy->_thunkpos= yythunkpos35;
  }  if (!yymatchDot(yy)) goto l27;
  }
  l28:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Char", yy->_buf+yy->_pos));
  return 1;
  l27:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Char", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_CLOSE(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE"));  if (!yymatchIString(yy, ")")) goto l36;  if (!yy_Spacing(yy)) goto l36;
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE", yy->_buf+yy->_pos));
  return 1;
  l36:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_OPEN(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "OPEN"));  if (!yymatchIString(yy, "(")) goto l37;  if (!yy_Spacing(yy)) goto l37;
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN", yy->_buf+yy->_pos));
  return 1;
  l37:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_PLUS(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "PLUS"));  if (!yymatchIString(yy, "+")) goto l38;  if (!yy_Spacing(yy)) goto l38;
  yyprintf((stderr, "  ok   %s @ %s\n", "PLUS", yy->_buf+yy->_pos));
  return 1;
  l38:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "PLUS", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_STAR(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "STAR"));  if (!yymatchIString(yy, "*")) goto l39;  if (!yy_Spacing(yy)) goto l39;
  yyprintf((stderr, "  ok   %s @ %s\n", "STAR", yy->_buf+yy->_pos));
  return 1;
  l39:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STAR", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_QUESTION(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "QUESTION"));  if (!yymatchIString(yy, "?")) goto l40;  if (!yy_Spacing(yy)) goto l40;
  yyprintf((stderr, "  ok   %s @ %s\n", "QUESTION", yy->_buf+yy->_pos));
  return 1;
  l40:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "QUESTION", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Primary(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Primary"));
  {  int yypos42= yy->_pos, yythunkpos42= yy->_thunkpos;  if (!yy_Identifier(yy)) goto l43;
  {  int yypos44= yy->_pos, yythunkpos44= yy->_thunkpos;  if (!yy_LEFTARROW(yy)) goto l44;  goto l43;
  l44:;	  yy->_pos= yypos44; yy->_thunkpos= yythunkpos44;
  }  yyDo(yy, yy_1_Primary, yy->_begin, yy->_end);  goto l42;
  l43:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yy_OPEN(yy)) goto l45;  if (!yy_Expression(yy)) goto l45;  if (!yy_CLOSE(yy)) goto l45;  goto l42;
  l45:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l46;  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_BEGIN)) goto l46;
#undef yytext
#undef yyleng
  }
  l47:;	
  {  int yypos48= yy->_pos, yythunkpos48= yy->_thunkpos;
  {  int yypos49= yy->_pos, yythunkpos49= yy->_thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l49;  goto l48;
  l49:;	  yy->_pos= yypos49; yy->_thunkpos= yythunkpos49;
  }  if (!yy_Char(yy)) goto l48;  goto l47;
  l48:;	  yy->_pos= yypos48; yy->_thunkpos= yythunkpos48;
  }  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_END)) goto l46;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l46;  if (!yy_Spacing(yy)) goto l46;  yyDo(yy, yy_2_Primary, yy->_begin, yy->_end);  goto l42;
  l46:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l50;  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_BEGIN)) goto l50;
#undef yytext
#undef yyleng
  }
  l51:;	
  {  int yypos52= yy->_pos, yythunkpos52= yy->_thunkpos;
  {  int yypos53= yy->_pos, yythunkpos53= yy->_thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l53;  goto l52;
  l53:;	  yy->_pos= yypos53; yy->_thunkpos= yythunkpos53;
  }  if (!yy_Char(yy)) goto l52;  goto l51;
  l52:;	  yy->_pos= yypos52; yy->_thunkpos= yythunkpos52;
  }  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_END)) goto l50;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l50;  if (!yy_Spacing(yy)) goto l50;  yyDo(yy, yy_3_Primary, yy->_begin, yy->_end);  goto l42;
  l50:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yy_Class(yy)) goto l54;  yyDo(yy, yy_4_Primary, yy->_begin, yy->_end);  goto l42;
  l54:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yy_DOT(yy)) goto l55;  yyDo(yy, yy_5_Primary, yy->_begin, yy->_end);  goto l42;
  l55:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yy_Action(yy)) goto l56;  yyDo(yy, yy_6_Primary, yy->_begin, yy->_end);  goto l42;
  l56:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yy_BEGIN(yy)) goto l57;  yyDo(yy, yy_7_Primary, yy->_begin, yy->_end);  goto l42;
  l57:;	  yy->_pos= yypos42; yy->_thunkpos= yythunkpos42;  if (!yy_END(yy)) goto l41;  yyDo(yy, yy_8_Primary, yy->_begin, yy->_end);
  }
  l42:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Primary", yy->_buf+yy->_pos));
  return 1;
  l41:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Primary", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_NOT(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "NOT"));  if (!yymatchIString(yy, "!")) goto l58;  if (!yy_Spacing(yy)) goto l58;
  yyprintf((stderr, "  ok   %s @ %s\n", "NOT", yy->_buf+yy->_pos));
  return 1;
  l58:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NOT", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Suffix(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Suffix"));  if (!yy_Primary(yy)) goto l59;
  {  int yypos60= yy->_pos, yythunkpos60= yy->_thunkpos;
  {  int yypos62= yy->_pos, yythunkpos62= yy->_thunkpos;  if (!yy_QUESTION(yy)) goto l63;  yyDo(yy, yy_1_Suffix, yy->_begin, yy->_end);  goto l62;
  l63:;	  yy->_pos= yypos62; yy->_thunkpos= yythunkpos62;  if (!yy_STAR(yy)) goto l64;  yyDo(yy, yy_2_Suffix, yy->_begin, yy->_end);  goto l62;
  l64:;	  yy->_pos= yypos62; yy->_thunkpos= yythunkpos62;  if (!yy_PLUS(yy)) goto l60;  yyDo(yy, yy_3_Suffix, yy->_begin, yy->_end);
  }
  l62:;	  goto l61;
  l60:;	  yy->_pos= yypos60; yy->_thunkpos= yythunkpos60;
  }
  l61:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Suffix", yy->_buf+yy->_pos));
  return 1;
  l59:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Suffix", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Action(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Action"));  if (!yymatchIString(yy, "{")) goto l65;  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_BEGIN)) goto l65;
#undef yytext
#undef yyleng
  }
  l66:;	
  {  int yypos67= yy->_pos, yythunkpos67= yy->_thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l67;  goto l66;
  l67:;	  yy->_pos= yypos67; yy->_thunkpos= yythunkpos67;
  }  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_END)) goto l65;
#undef yytext
#undef yyleng
  }  if (!yymatchIString(yy, "}")) goto l65;  if (!yy_Spacing(yy)) goto l65;
  yyprintf((stderr, "  ok   %s @ %s\n", "Action", yy->_buf+yy->_pos));
  return 1;
  l65:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Action", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_AND(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "AND"));  if (!yymatchIString(yy, "&")) goto l68;  if (!yy_Spacing(yy)) goto l68;
  yyprintf((stderr, "  ok   %s @ %s\n", "AND", yy->_buf+yy->_pos));
  return 1;
  l68:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AND", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Prefix(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Prefix"));
  {  int yypos70= yy->_pos, yythunkpos70= yy->_thunkpos;  if (!yy_AND(yy)) goto l71;  if (!yy_Action(yy)) goto l71;  yyDo(yy, yy_1_Prefix, yy->_begin, yy->_end);  goto l70;
  l71:;	  yy->_pos= yypos70; yy->_thunkpos= yythunkpos70;  if (!yy_AND(yy)) goto l72;  if (!yy_Suffix(yy)) goto l72;  yyDo(yy, yy_2_Prefix, yy->_begin, yy->_end);  goto l70;
  l72:;	  yy->_pos= yypos70; yy->_thunkpos= yythunkpos70;  if (!yy_NOT(yy)) goto l73;  if (!yy_Suffix(yy)) goto l73;  yyDo(yy, yy_3_Prefix, yy->_begin, yy->_end);  goto l70;
  l73:;	  yy->_pos= yypos70; yy->_thunkpos= yythunkpos70;  if (!yy_Suffix(yy)) goto l69;
  }
  l70:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Prefix", yy->_buf+yy->_pos));
  return 1;
  l69:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Prefix", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_SLASH(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "SLASH"));  if (!yymatchIString(yy, "/")) goto l74;  if (!yy_Spacing(yy)) goto l74;
  yyprintf((stderr, "  ok   %s @ %s\n", "SLASH", yy->_buf+yy->_pos));
  return 1;
  l74:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SLASH", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Sequence(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Sequence"));
  {  int yypos76= yy->_pos, yythunkpos76= yy->_thunkpos;  if (!yy_Prefix(yy)) goto l77;
  l78:;	
  {  int yypos79= yy->_pos, yythunkpos79= yy->_thunkpos;  if (!yy_Prefix(yy)) goto l79;  yyDo(yy, yy_1_Sequence, yy->_begin, yy->_end);  goto l78;
  l79:;	  yy->_pos= yypos79; yy->_thunkpos= yythunkpos79;
  }  goto l76;
  l77:;	  yy->_pos= yypos76; yy->_thunkpos= yythunkpos76;  yyDo(yy, yy_2_Sequence, yy->_begin, yy->_end);
  }
  l76:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Sequence", yy->_buf+yy->_pos));
  return 1;
  l75:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Sequence", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Expression(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Expression"));  if (!yy_Sequence(yy)) goto l80;
  l81:;	
  {  int yypos82= yy->_pos, yythunkpos82= yy->_thunkpos;  if (!yy_SLASH(yy)) goto l82;  if (!yy_Sequence(yy)) goto l82;  yyDo(yy, yy_1_Expression, yy->_begin, yy->_end);  goto l81;
  l82:;	  yy->_pos= yypos82; yy->_thunkpos= yythunkpos82;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Expression", yy->_buf+yy->_pos));
  return 1;
  l80:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expression", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_LEFTARROW(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "LEFTARROW"));  if (!yymatchIString(yy, "<-")) goto l83;  if (!yy_Spacing(yy)) goto l83;
  yyprintf((stderr, "  ok   %s @ %s\n", "LEFTARROW", yy->_buf+yy->_pos));
  return 1;
  l83:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "LEFTARROW", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Identifier(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Identifier"));  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_BEGIN)) goto l84;
#undef yytext
#undef yyleng
  }  if (!yy_IdentStart(yy)) goto l84;
  l85:;	
  {  int yypos86= yy->_pos, yythunkpos86= yy->_thunkpos;  if (!yy_IdentCont(yy)) goto l86;  goto l85;
  l86:;	  yy->_pos= yypos86; yy->_thunkpos= yythunkpos86;
  }  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!(YY_END)) goto l84;
#undef yytext
#undef yyleng
  }  if (!yy_Spacing(yy)) goto l84;
  yyprintf((stderr, "  ok   %s @ %s\n", "Identifier", yy->_buf+yy->_pos));
  return 1;
  l84:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Identifier", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_EndOfFile(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "EndOfFile"));
  {  int yypos88= yy->_pos, yythunkpos88= yy->_thunkpos;  if (!yymatchDot(yy)) goto l88;  goto l87;
  l88:;	  yy->_pos= yypos88; yy->_thunkpos= yythunkpos88;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "EndOfFile", yy->_buf+yy->_pos));
  return 1;
  l87:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EndOfFile", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Definition(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Definition"));  if (!yy_Identifier(yy)) goto l89;  yyDo(yy, yy_1_Definition, yy->_begin, yy->_end);  if (!yy_LEFTARROW(yy)) goto l89;  if (!yy_Expression(yy)) goto l89;  yyDo(yy, yy_2_Definition, yy->_begin, yy->_end);  yyText(yy, yy->_begin, yy->_end);  {
#define yytext yy->_text
#define yyleng yy->_textlen
if (!( YYACCEPT )) goto l89;
#undef yytext
#undef yyleng
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Definition", yy->_buf+yy->_pos));
  return 1;
  l89:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Definition", yy->_buf+yy->_pos));
  return 0;
}
YY_RULE(int) yy_Spacing(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "Spacing"));
  l91:;	
  {  int yypos92= yy->_pos, yythunkpos92= yy->_thunkpos;
  {  int yypos93= yy->_pos, yythunkpos93= yy->_thunkpos;  if (!yy_Space(yy)) goto l94;  goto l93;
  l94:;	  yy->_pos= yypos93; yy->_thunkpos= yythunkpos93;  if (!yy_Comment(yy)) goto l92;
  }
  l93:;	  goto l91;
  l92:;	  yy->_pos= yypos92; yy->_thunkpos= yythunkpos92;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Spacing", yy->_buf+yy->_pos));
  return 1;
}
YY_RULE(int) yy_Grammar(yycontext *yy)
{  int yypos0= yy->_pos, yythunkpos0= yy->_thunkpos;
  yyprintf((stderr, "%s\n", "Grammar"));  if (!yy_Spacing(yy)) goto l95;  if (!yy_Definition(yy)) goto l95;
  l96:;	
  {  int yypos97= yy->_pos, yythunkpos97= yy->_thunkpos;  if (!yy_Definition(yy)) goto l97;  goto l96;
  l97:;	  yy->_pos= yypos97; yy->_thunkpos= yythunkpos97;
  }  if (!yy_EndOfFile(yy)) goto l95;
  yyprintf((stderr, "  ok   %s @ %s\n", "Grammar", yy->_buf+yy->_pos));
  return 1;
  l95:;	  yy->_pos= yypos0; yy->_thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Grammar", yy->_buf+yy->_pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->_buflen)
    {
      yyctx->_buflen= YY_BUFFER_SIZE;
      yyctx->_buf= (char *)YY_MALLOC(yyctx, yyctx->_buflen);
      yyctx->_textlen= YY_BUFFER_SIZE;
      yyctx->_text= (char *)YY_MALLOC(yyctx, yyctx->_textlen);
      yyctx->_thunkslen= YY_STACK_SIZE;
      yyctx->_thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->_thunkslen);
      yyctx->_valslen= YY_STACK_SIZE;
      yyctx->_vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->_valslen);
      memset(yyctx->_vals, 0, sizeof(YYSTYPE) * yyctx->_valslen);
      yyctx->_begin= yyctx->_end= yyctx->_pos= yyctx->_limit= yyctx->_thunkpos= 0;
    }
  yyctx->_begin= yyctx->_end= yyctx->_pos;
  yyctx->_thunkpos= 0;
  yyctx->_val= yyctx->_vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_Grammar);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->_buflen)
    {
      yyctx->_buflen= 0;
      YY_FREE(yyctx, yyctx->_buf);
      YY_FREE(yyctx, yyctx->_text);
      YY_FREE(yyctx, yyctx->_thunks);
      YY_FREE(yyctx, yyctx->_vals);
    }
  return yyctx;
}

#endif
